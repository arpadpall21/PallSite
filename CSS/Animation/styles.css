        /* keyframe rule TEST */
.animColor {
    animation-iteration-count: infinite;
    animation-duration: 5s;
    animation-name: animColor;
}
@keyframes animColor{
    form {color: black;}
    50% {color: beige;}
    to {color: black;}
}

        /*Simple-animation*/
.simple-animation{
    height: 100px;
    width: 550px;
    background-color: black;
    animation-name: ani;
    animation-duration: 5s;
    animation-delay: 1s;
}
@keyframes ani {
    from {background-color:black;}
    to {background-color:red;}
}
.simple-animation> p{
    color: white;
    font-weight: bold;
}

        /*multiple-animation*/
.multiple-animation{
    height: 100px;
    width: 550px;
    background-color: black;
    position: relative;
    animation-name: multiple;
    animation-duration: 6s;
    animation-iteration-count: 4;
}
@keyframes multiple{
    0% {background-color:black; left:0}
    20% {background-color:green; left:15px;}
    40% {background-color:yellow; left:30px;}
    60% {background-color:blue; left:45px;}
    80% {background-color:cyan; left:60px;}
    100% {background-color:grey; left:75px;}
}

        /* animation-delay minus value TEST */
.minusDelay {
    position: relative;
    animation-name: delayed;
    animation-duration: 10s;
    animation-delay: -2s;
    animation-iteration-count: infinite;
}
@keyframes delayed{
    from {left: 0;}
    to {left: 200px;}
}

        /*animation-directions*/
[class$=cycle] > p{
    color: white;
    font-weight: bold;
}
.normal-cycle{
    height: 50px;
    width: 40%;
    background-color: black;
    animation-name: normal;
    animation-duration: 4s;
    animation-iteration-count: infinite;
}
@keyframes normal{
    0% {width:40%;}
    25% {width: 55%;}
    50% {width: 70%;}               
    75% {width: 85%;}
    100% {width: 100%;}    
} 
.reverse-cycle{
    height: 50px;
    width: 40%;
    background-color: black;
    animation-name: reverse;
    animation-duration: 4s;
    animation-iteration-count: infinite;
    animation-direction: reverse;
}
@keyframes reverse{
    0% {width:40%;}
    25% {width: 55%;}
    50% {width: 70%;}               
    75% {width: 85%;}
    100% {width: 100%;}    
}
.alternation-cycle{
    height: 50px;
    width: 40%;
    background-color: black;
    animation-name: alternate;
    animation-duration: 4s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}
@keyframes alternate{
    0% {width:40%;}
    25% {width: 55%;}
    50% {width: 70%;}               
    75% {width: 85%;}
    100% {width: 100%;}    
}
.alternation-reverse-cycle{
    height: 50px;
    width: 40%;
    background-color: black;
    animation-name: alternate_reverse;
    animation-duration: 4s;
    animation-iteration-count: infinite;
    animation-direction: alternate-reverse;
}
@keyframes alternate_reverse{
    0% {width:40%;}
    25% {width: 55%;}
    50% {width: 70%;}               
    75% {width: 85%;}
    100% {width: 100%;}    
}

        /* play/pause controle with JS */
.rotateControl {
    text-align: center;
    font-weight: bold;
    font-size: 2.0em;
    margin: auto;
    cursor: pointer;
}
@keyframes rotateIt{
    from {transform: rotateY(0);}
    to {transform: rotateY(360deg);}
}

        /*animation speed curvers*/
[class|=curve] > p{
    color: white;
    font-weight: bold;
    padding: 1px;
}
[class|=curve]{
    background-color: orangered;
    position: relative;
    left: 0;
    height: 60px;
    width: 150px;
    animation: box_slide 3s infinite alternate;
}
@keyframes box_slide{
    form {left: 0;}
    to {left: 400px;}
}
[class$=ease]{
    animation-timing-function: ease;
}
[class$=linear]{
    animation-timing-function: linear;
}
[class$=ease-in]{
    animation-timing-function: ease-in;
}
[class$=ease-out]{
    animation-timing-function: ease-out;
}
[class$=ease-in-out]{
    animation-timing-function: ease-in-out;
}
[class$=ease-in-out]{
    animation-timing-function: ease-in-out;
}
[class$=ease-in-out]{
    animation-timing-function: ease-in-out;
}
[class$=cubic-bezier]{
    animation-timing-function: cubic-bezier(1,.94,0,.14);
}
[class$=step]{
    animation-timing-function: steps(5);
}

        /* animation steps */
.stepTest1 {
    position: relative;
    font-weight: bold;
    border-left: solid 3px red;
    animation-timing-function: steps(3, start);
    animation-duration: 3s;
    animation-iteration-count: 2;
    animation-delay: 1s;
    animation-name: steps;
}
.stepTest2 {
    position: relative;
    font-weight: bold;
    border-left: solid 3px red;
    animation-timing-function: steps(3, end);
    animation-duration: 3s;
    animation-iteration-count: 2;
    animation-delay: 1s;
    animation-name: steps;
}
@keyframes steps {
    from {left: 0;}
    to {left: 100px;}
}

        /*animation-fill-mode*/
[class|=timing]{
    padding: 2px;
    margin: 5px;
    height: 70px;
    width: 900px;
    position: relative;
    left: 50px;
    background-color: forestgreen;
    animation-name: time-anim;
    animation-duration: 5s;
    animation-delay: 2s;
}
[class|=timing] > * {
    margin: 3px;   
}
@keyframes time-anim{
    from {left: 0;}
    to {left: 500px;}
}
[class=timing-both]{
    animation-fill-mode: both;
}
[class=timing-forwards]{
    animation-fill-mode: forwards;
}
[class=timing-delay-backwards]{
    animation-fill-mode: backwards;
}

        /* shorthand animate*/
.shortHand_animate {
    position: relative;
    width: 75px;
    background-color: lightpink;
    text-align: right;
    transform-origin: right center;
    animation: rotateMe 2s ease-in-out 1s infinite alternate-reverse;
}
@keyframes rotateMe {
    from {transform:rotateZ(0)}
    75% {transform: rotateZ(-360deg)}
    to {transform: rotateZ(-360deg)}
}

