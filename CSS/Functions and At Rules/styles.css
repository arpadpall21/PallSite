@charset "utf-8";
@import "css files/testCss1.css" screen and (min-width:1000px);
@import url("css files/testCss2.css");
    
    
        /* calc() fucntion */
[class^=calc]{
    border: 2px double black;
    background-color: orange;
    padding: 10px;
    text-align: center;
    margin: auto;
}
.calc_1{
    width: 100%;        /* fallback */
    width: calc(100% - 180px);
}
.calc_2{
    width: 80%;        /* fallback */
    width: calc(50% + 150px);
}
.calc_3{
    width: 30%;        /* fallback */
    width: calc(100% / 3);
}
.calc_4{
    width: 45%;        /* fallback */
    width: calc(15% * 4);
}
.calc_5{
    width: 20%;        /* fallback */
    width: calc(((10% * 4) / 2) + 135px - 25px);
}

        /* CSS Specificity TEST1 */
#idTarg {
    color: red;
}
p[style="color:red;"] {
    color: green !important;
}
p[id="idTarg"] {
    color: green !important;
}

        /* Specificity addign up TEST */
[class|="par"] {
    border: solid 1px black;
}
    /* Specificity value "0|1|0|0" */        
#idTarget {     
    color: green;
}
    /* Specificity value 0|0|11|1*/
.par-1 .par-2 .par-3 .par-4 .par-5 .par-6 .par-7 .par-8 .par-9 .par-10 .par-11 p  {
    color: red;
}

        /* :not() pseudo-class specificity value TEST */
.not_Spec_Test {
    border: double 3px blue;
}
    /* Specificity value 0|0|2|1 */
.not_Spec_Test p:not(.target) {
    color: red;
}
    /* Specificity value 0|1|1|1 */
.not_Spec_Test p:not(#target) {
    color: green;
}

        /* all property TEST */
#setInitial {
    color: green;
    text-decoration: underline;
    font-weight: bold;
    line-height: 150%;
}
#setInitial {
    all: initial;
}
.parentInherit {
    color: yellow;
    text-decoration: line-through;
    font-weight: 100;
    line-height: 200%;
}
#setInherit {
    color: green;
    text-decoration: underline;
    font-weight: bold;
    line-height: 150%;
}
#setInherit {
    all: inherit;
}
.inheritIt {
    border: 3px groove red;
}
.inheritIt span {
    all: inherit;
}

        /* all:unset; TEST */
.unsetPar {
    color: green;
    border: solid 2px black;
}
.unsetPar span {
    color: red;
    border: dotted 4px red;
}
.unsetPar span {
    all: unset;
}

        /* var() TEST */
.parentCssVar {                 
    border: solid black 2px;    /*  variables (custom properties) are declared in the parent element  */
    --myColor: white;
    --myBorder: dashed black 1px;
    --myFont: Franklin Gothic Medium, monospace;
    border: var(--myBorder);
}
.childVar {                     /*  direct child element inherit and its children inherit inheritable variable values as normal  */
    color: var(--myColor);
    border: var(--myBorder);
    font-family: var(--myFont);
}
.greatParentCssVar {            /* custom properties are not inherited by the ancestros (just linke normal scoping) */
    border: var (--myBorder);
}
.neighbourVar {                 /*  sibling element cannot use custom properties declared in the other siblings */
    color: var(--myColor);
    border: var(--myBorder);
    font-family: var(--myFont);
}

        /* var() fallback value TEST */
:root {
    --myTextDecoration: underline;
}
.varFallback_test {
    text-decoration: var(--myTextDecoration);
    color: var(--myColor, red);                 /* variable value does not exist, fallback value used*/
    border: var(--myBorder, double 3px blue);   /* variable value does not exist, fallback value used*/
}

        /* multiple fallback TEST */
.multipleFallback_test {
    width: 1000px;
    height: 500px;
    border: double lightcoral 5px;
    background: var(--undefinedBcg, url(bush2.png) no-repeat, url(bush1.png) no-repeat);
}

        /*-- @supports TEST-1 --*/
@supports(color:green) {
    .support1 {
        color: green;
        text-decoration: underline;
        text-decoration-color: red;
    }
}
@supports(unvalidProp: noVal) {
    .support1 {
        font-size: 10rem;
    }
}
    
        /*-- @support with not operator TEST --*/
@supports not (noProp:noVal) {
    .support2 { color: green }
}
@supports not (color: white) {
    .support2 { font-size: 2rem }
}
    
        /*-- @support with and and or operators TEST --*/
@supports (color:yellow) and (color:piros) {
    .support3 { color:green }
}
@supports (color:yellow) or (color:piros) {
    .support3 { font-family: monospace }
}
    
        /*-- @support nested conditons TEST --*/
@supports ((not (pagex:reg)) or (-webkit-animation-delay:2s)) and (break-after:page) {
    .support4 { color: green }
}
